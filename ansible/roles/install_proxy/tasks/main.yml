---
- name: "Role *install_proxy* starting..."
  ansible.builtin.debug:
    msg: [
      "*install_proxy* role starting...",
      "proxy_my_domain_tld is: {{ proxy_my_domain_tld }}",
      "proxy_tf_workspace is: {{ proxy_tf_workspace }}"
    ]

- name: "Download and unpack 'acme.sh' script"
  ansible.builtin.unarchive:
    src: "https://github.com/acmesh-official/acme.sh/archive/refs/heads/master.zip"
    remote_src: true
    dest: "/opt/LEscript"
    creates: "/opt/LEscript/acme.sh-master"

- name: "Copy supplementary scripts"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/opt/LEscript"
    mode: "0755"
  with_items:
    - "files/get_cert.sh"
    - "files/install_acme.sh"
    - "files/register_acc.sh"

- name: "Check if catalog '/opt/LEscript/acme.sh' already exists"
  ansible.builtin.stat:
    path: "/opt/LEscript/acme.sh"
  register: setup_done

- name: "Setup 'acme.sh' script"
  ansible.builtin.command:
    cmd: "/opt/LEscript/install_acme.sh"
  when: not setup_done.stat.exists

- name: "Check if LE-account already registered"
  ansible.builtin.stat:
    path: "/opt/LEscript/acme.config/myaccount.key"
  register: key_done

- name: "Register account in Let's Encrypt"
  ansible.builtin.command:
    cmd: "/opt/LEscript/register_acc.sh"
  when: (not key_done.stat.exists) and (proxy_tf_workspace != "stage")

- name: "Check if certs already got"
  ansible.builtin.find:
    paths: "/opt/LEscript/certs"
    file_type: directory
    recurse: false
  register: get_cert_done

- name: "Get certs"
  ansible.builtin.command:
    cmd: "/opt/LEscript/get_cert.sh"
  when: (get_cert_done.matched == 0) and (proxy_tf_workspace != "stage")

- name: "Make catalogs for fake certs in stage mode"
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}"
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}_ecc"
  when: tf_workspace == "stage"

- name: "Create fake certs in stage mode"
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    mode: '0644'
  with_items:
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}/fullchain.cer"
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}/{{ proxy_my_domain_tld }}.key"
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}_ecc/fullchain.cer"
    - "/opt/LEscript/certs/{{ proxy_my_domain_tld }}_ecc/{{ proxy_my_domain_tld }}.key"
  when: tf_workspace == "stage"

- name: "Install nginx v1.20"
  become: true
  ansible.builtin.dnf:
    name:
      - "@nginx:1.20/common"
    state: present
  notify: "Restart and enable nginx service"

- name: "Create log folders for nginx"
  become: true
  ansible.builtin.file:
    path: "/var/log/nginx/{{ item.value.server_log_dir }}"
    state: directory
    owner: "nginx"
    group: "root"
    mode: "0755"
  with_dict: "{{ proxy_settings }}"
  notify: "Restart and enable nginx service"

- name: "Create nginx config files"
  become: true
  ansible.builtin.template:
    src: "templates/virt_server.j2"
    dest: "/etc/nginx/conf.d/{{ item.key }}.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  with_dict: "{{ proxy_settings }}"
  notify: "Restart and enable nginx service"

- name: "Check if Diffie-Hellman key already exists"
  become: true
  ansible.builtin.stat:
    path: "/etc/ssl/certs/dhparam.pem"
  register: dh_key_done

- name: "Generate Diffie-Hellman key"
  become: true
  ansible.builtin.command:
    cmd: "openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
  when: not dh_key_done.stat.exists

- name: "Allow HTTP on firewall"
  become: true
  ansible.posix.firewalld:
    service: http
    permanent: true
    state: enabled
    immediate: true

- name: "Allow HTTPS on firewall"
  become: true
  ansible.posix.firewalld:
    service: https
    permanent: true
    state: enabled
    immediate: true

- name: "Allow MySQL on firewall"
  become: true
  ansible.posix.firewalld:
    zone: "home"
    service: mysql
    permanent: true
    state: enabled
    immediate: true
