---
# На всякий случай показываем кто тут босс :)
- name: "Show who is master ;)"
  ansible.builtin.debug:
    msg: "Cluster master will be: {{ cluster_master | default('Unknown') }}"

# Вычисляем FQDN данной конкретной ноды
- name: "Get node FQDN"
  ansible.builtin.set_fact:
    db_nodename: "{{ ansible_fqdn }}"

# Вычищаем из DB всех анонимных пользователей
- name: "Remove all anonymous users"
  block:
    - name: "Try to remove all anonymous users..."
      community.mysql.mysql_user:
        name: ''
        host_all: true
        state: "absent"
  rescue:  # Если таких пользователей (уже) нет, то не выпадаем в осадок.
    - name: "Oops!!!"
      ansible.builtin.debug:
        msg: "Oops! It's seems that all anonymous users already removed?"

# Задаём root пользователю DB непустой пароль и пытаемся хоть
# немного ограничить доступ к этой учётке извне
- name: "Setup root password for cluster and limit it to local network login only"
  block:
    - name: "Try to setup root password for cluster and limit it to local network login only"
      community.mysql.mysql_user:
        name: "root"
        host: "{{ item }}"
        password: "{{ cluster_root_password }}"
        check_implicit_admin: true
        login_user: "root@localhost"
        login_password: "{{ cluster_init_root_password }}"
        state: "present"
        priv: '*.*:ALL,GRANT'
      with_items:
        - "{{ db_nodename }}"
        - "%.{{ ansible_domain }}"
        - "{{ cluster_network }}"
        - "192.168.1.%"
        - "127.0.0.1"
        - "::1"
        - "localhost"
  rescue:  # Если пароль (уже) не пустой, то не падаем в обморок.
    - name: "Oops!!!"
      ansible.builtin.debug:
        msg: "Oops! It's seems that root password already set."

# Вычисляем ID сервера - тупо используем номер ноды.
# Для DB0100500.example.com ID будет 100500
- name: "Calculate server-id"
  ansible.builtin.set_fact:
    server_id: "{{ ansible_fqdn | regex_search ('[0-9]+') | int }}"

# Показываем ID сервера, так, на всякий случай
- name: "Show server-id"
  ansible.builtin.debug:
    msg: "'server-id' is: {{ server_id }}"

# Вносим ID в конфиг сервера данной ноды
- name: "Copy server.conf to /etc/my.cnf.d"
  become: true
  ansible.builtin.template:
    src: "templates/server.cnf.j2"
    dest: "/etc/my.cnf.d/server.cnf"
    owner: "root"
    group: "root"
    mode: '0644'
  notify: "Restart MariaDB"

# Перезапускаем сервер MariaDB
- name: "Flush handlers"
  ansible.builtin.meta:
    flush_handlers

# На вский случай показываем имя текущей ноды
# и имя ноды, которая будет мастером
- name: "About current node..."
  ansible.builtin.debug:
    msg: [
      "db_nodename is: {{ db_nodename }}",
      "cluster_master is: {{ cluster_master }}"
    ]

# Этот пункт работает ТОЛЬКО для MASTER-НОДЫ
# Создаём пользователя для репликации
- name: "Setup master node"
  block:
    - name: "Create replication user"
      community.mysql.mysql_user:
        login_user: "root"
        login_password: "{{ cluster_root_password }}"
        name: "{{ cluster_repl_user }}"
        password: "{{ cluster_repl_pass }}"
        host: "{{ cluster_network }}"
        priv: '*.*:REPLICATION SLAVE'
        state: present
  when: db_nodename == cluster_master

# В питоновских библиотеках для MySQL бага:
# "get master status" дохнет на слишком быстрых машинах
# Надо притормозить перед этой операцией, тогда сработает
- name: "Magic sleep"
  ansible.builtin.command:
    cmd: "sleep 30"
  changed_when: false

# Этот пункт работает ТОЛЬКО для SLAVE-НОД
- name: "Setup slave node(s)"
  block:
    - name: "Get MASTER status"           # Получаем данные по
      community.mysql.mysql_replication:  # master-ноде
        login_user: "root"
        login_password: "{{ cluster_root_password }}"
        login_host: "{{ cluster_master }}"
        mode: getmaster
      register: masterdata

    - name: "Show MASTER status"          # Выдаем их на экран
      ansible.builtin.debug:              # Вдруг кому нужно
        msg: [
          "MASTER STATUS from {{ cluster_master }}",
          "-------------------------------------",
          "binlog file is: {{ masterdata.File }}",
          "binlog position is: {{ masterdata.Position }}"
        ]

    - name: "Check SLAVE status"          # Проверяем - не запустил ли
      community.mysql.mysql_replication:  # кто-то репликацию до нас
        login_user: "root"
        login_password: "{{ cluster_root_password }}"
        mode: getslave
      register: slavedata

    - name: "CHANGE MASTER TO"            # Если репликация ещё не запущена,
      community.mysql.mysql_replication:  # настраиваем её
        login_user: "root"
        login_password: "{{ cluster_root_password }}"
        mode: changemaster
        primary_host: "{{ cluster_master }}"
        primary_user: "{{ cluster_repl_user }}"
        primary_password: "{{ cluster_repl_pass }}"
        primary_log_file: "{{ masterdata.File }}"
        primary_log_pos: "{{ masterdata.Position }}"
      when: not slavedata.Is_Replica

    - name: "START SLAVE"                 # Запускаем репликацию
      community.mysql.mysql_replication:
        login_user: "root"
        login_password: "{{ cluster_root_password }}"
        mode: startslave
      when: not slavedata.Is_Replica

    - name: "Can not start replication..."  # Если же кто-то репликацию уже запустил
      ansible.builtin.debug:                # до нас - ругаемся нехорошими словами
        msg: "Replication already running!"
      when: slavedata.Is_Replica

  when: db_nodename != cluster_master
