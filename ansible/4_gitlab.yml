---
# Создаём токен для GitLab'а и раннеров
# результат записываем на локальный диск
- name: "Generate token"
  hosts: localhost
  gather_facts: false
  become: true
  become_user: "root"
  remote_user: "root"
  roles:
    - role: generate_token
      vars:
        generate_token_filepath: "./ssh/token"

# Устанавливаем общее ПО для хостов из группы
# Phase4 (GitLab + GitLab Runner(s) )
- name: "Common setup part for Phase4 hosts (GitLab + GitLab Runner(s) )"
  hosts: Phase4
  gather_facts: true
  become: true
  become_user: "root"
  remote_user: "cloud-user"
  roles:
    - role: setup_proxy_dnf                     # Все хосты, кроме прокси, доступа к интернету напрямую не имеют
      vars:                                     # Обучаем несчастных работать через прокси
        setup_proxy_fqdn: "{{ tf_proxy_name }}"
        setup_proxy_port: "{{ tf_proxy_port }}"
    - role: deploy_ssh_keys                     # Заливаем SSH-ключи
      vars:
        deploy_ssh_keys_priv_dir: "./ssh"
        deploy_ssh_keys_priv_key: "rsync.key"
        deploy_ssh_keys_trusted_domain: "{{ tf_my_domain_tld }}"
        deploy_ssh_keys_owner: "cloud-user"
        deploy_ssh_keys_target_dir: "/home/cloud-user/.ssh"
    - role: install_common                      # Ставим комплект необходимых утилит

- name: "Install Gitlab-server"
  hosts: GitLabSrv
  gather_facts: false
  become: true
  become_user: "root"
  remote_user: "cloud-user"
  roles:
    - role: install_pull_files                               # Устанавливаем сервис для выкачки
      vars:                                                  # HTTPS-сертификатов с прокси сервера
        install_pull_files_src_login_host: "cloud-user@{{ tf_proxy_name }}"
        install_pull_files_path_ssh_key: "/home/cloud-user/.ssh/rsync.key"
        install_pull_files_src_files: "/opt/LEscript/certs/"
        install_pull_files_dest_dir: "/opt/LEscript/certs/"
    - role: install_gitlab                                   # Устанавливаем GitLab-сервер
      vars:
        install_gitlab_root_pass: "{{ tf_gitlab_root_pass }}"
        install_gitlab_runner_token: "{{ lookup('ansible.builtin.file', './ssh/token') }}"
        install_gitlab_external_url: "https://gitlab.{{ tf_my_domain_tld }}"
        install_gitlab_proxy_url: "http://{{ tf_proxy_name }}:{{ tf_proxy_port }}"
        install_gitlab_proxy_internal_ip: "{{ tf_proxy_internal_ip }}"
        install_gitlab_ca_cert: "/opt/LEscript/certs/{{ tf_my_domain_tld }}/ca.cer"
        install_gitlab_fullchain_cert: "/opt/LEscript/certs/{{ tf_my_domain_tld }}/fullchain.cer"
        install_gitlab_cert_key: "/opt/LEscript/certs/{{ tf_my_domain_tld }}/{{ tf_my_domain_tld }}.key"
        install_gitlab_monitoring_srv: "{{ tf_monitoring_server_ip }}"

- name: "Install Gitlab-runner(s)"
  hosts: Runners
  gather_facts: false
  become: true
  become_user: "root"
  remote_user: "cloud-user"
  roles:
    - role: install_node_exporter               # Устанавливаем Node Exporter
    - role: install_glrunner                    # Устанавливаем GitLab-runner
    - role: setup_cicd_glrunner                 # Предустановки CI/CD в раннере
    - role: setup_glrunner                      # Подключаем его к GitLab-серверу
      vars:
        setup_glrunner_token: "{{ lookup('ansible.builtin.file', './ssh/token') }}"
        setup_glrunner_srv_url: "https://{{ tf_gitlab_server_fqdn }}"
        setup_glrunner_srv_ip: "{{ tf_gitlab_server_ip }}"
        setup_glrunner_executor: "shell"
